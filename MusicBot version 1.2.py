import logging
import random
import requests
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
)
from telegram.ext import (
    Updater, CommandHandler, MessageHandler, Filters,
    CallbackContext, CallbackQueryHandler
)

# –¢–í–û–ò –ö–õ–Æ–ß–ò
TELEGRAM_TOKEN = 'your token'
YOUTUBE_API_KEY = 'your api'

GENRES = ['—Ä–æ–∫', '–ø–æ–ø', '—Ñ–æ–Ω–∫', '–º–µ—Ç–∞–ª']

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)


def get_random_video_link(genre, history=None):
    if history is None:
        history = []

    SEARCH_URL = "https://www.googleapis.com/youtube/v3/search"
    all_results = []
    params = {
        "part": "snippet",
        "q": genre + " music",
        "key": YOUTUBE_API_KEY,
        "type": "video",
        "videoEmbeddable": "true",
        "videoDuration": "medium",
        "maxResults": 50
    }

    try:
        next_page_token = None
        for _ in range(3):  # 3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ 50 –≤–∏–¥–µ–æ
            if next_page_token:
                params['pageToken'] = next_page_token
            else:
                params.pop('pageToken', None)

            response = requests.get(SEARCH_URL, params=params)
            response.raise_for_status()
            data = response.json()

            all_results.extend(data.get("items", []))
            next_page_token = data.get("nextPageToken")
            if not next_page_token:
                break

        valid_videos = []
        for item in all_results:
            video_id = item["id"]["videoId"]
            if video_id in history:
                continue

            title = item["snippet"]["title"]
            thumbnail = item["snippet"]["thumbnails"]["high"]["url"]
            url = f"https://www.youtube.com/watch?v={video_id}"

            if "shorts" not in url and "embed" not in url:
                valid_videos.append({
                    "video_id": video_id,
                    "title": title,
                    "url": url,
                    "thumbnail": thumbnail
                })

        if valid_videos:
            return random.choice(valid_videos)
        else:
            return None

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:", e)
        return None


def start(update: Update, context: CallbackContext):
    keyboard = [['‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text("üéß –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏ –°—Ç–∞—Ä—Ç, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä.", reply_markup=reply_markup)


def handle_genre(update: Update, context: CallbackContext):
    text = update.message.text.lower()

    if text == '‚ñ∂Ô∏è —Å—Ç–∞—Ä—Ç':
        keyboard = [[g for g in GENRES]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        update.message.reply_text("–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä üé∂", reply_markup=reply_markup)
        return

    if text in GENRES:
        # –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ ‚Äî –º–∞–∫—Å–∏–º—É–º 30 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
        user_history = context.user_data.setdefault('history', [])
        if len(user_history) > 30:
            context.user_data['history'] = user_history[-30:]

        send_track(update, context, text)
    else:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä –∏–∑ –º–µ–Ω—é.")


def send_track(update_or_query, context: CallbackContext, genre):
    if hasattr(update_or_query, 'message'):
        chat = update_or_query.message
    else:
        chat = update_or_query.callback_query.message

    user_history = context.user_data.setdefault('history', [])
    result = get_random_video_link(genre, history=user_history)

    if not result:
        chat.reply_text("‚ö†Ô∏è –í—Å–µ —Ç—Ä–µ–∫–∏ —É–∂–µ –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã.")
        return

    title = result["title"]
    url = result["url"]
    thumbnail = result["thumbnail"]
    video_id = result["video_id"]

    user_history.append(video_id)
    # –û–±—Ä–µ–∑–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å—Ä–∞–∑—É –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ (—á—Ç–æ–±—ã –Ω–µ —Ä–∞–∑—Ä–∞—Å—Ç–∞–ª–∞—Å—å)
    if len(user_history) > 30:
        context.user_data['history'] = user_history[-30:]

    context.user_data['last_genre'] = genre
    context.user_data['last_track'] = f"{title}\n{url}"

    buttons = InlineKeyboardMarkup([
        [InlineKeyboardButton("üé≤ –ï—â—ë", callback_data='more')],
        [InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ YouTube", url=url)],
        [InlineKeyboardButton("‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data='fav')],
        [InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data='menu')]
    ])

    chat.reply_photo(
        photo=thumbnail,
        caption=f"üé∂ {title}\n{url}",
        reply_markup=buttons
    )


def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    if query.data == 'more':
        genre = context.user_data.get('last_genre')
        if genre:
            send_track(query, context, genre)

    elif query.data == 'fav':
        last = context.user_data.get('last_track')
        if last:
            favorites = context.user_data.setdefault('favorites', [])
            if last not in favorites:
                favorites.append(last)
            query.message.reply_text("üíæ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")

    elif query.data == 'menu':
        help_command(update.callback_query, context)

    elif query.data.startswith('fav_del_'):
        # –£–¥–∞–ª—è–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫ –ø–æ –∏–Ω–¥–µ–∫—Å—É
        try:
            idx = int(query.data.split('_')[-1])
            favorites = context.user_data.setdefault('favorites', [])
            if 0 <= idx < len(favorites):
                removed = favorites.pop(idx)
                query.message.reply_text(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:\n{removed}")
            else:
                query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–∫.")
        except Exception:
            query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞.")
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        show_favorites(update, context)


def show_favorites(update: Update, context: CallbackContext):
    favorites = context.user_data.get('favorites', [])

    if not favorites:
        update.message.reply_text("‚≠ê –£ —Ç–µ–±—è –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤.")
        return

    buttons = []
    text_lines = []
    for i, track in enumerate(favorites):
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫ —Å –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–∏—Ç—å
        text_lines.append(f"{i+1}. {track}")
        buttons.append([InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å {i+1}", callback_data=f'fav_del_{i}')])

    reply_markup = InlineKeyboardMarkup(buttons)
    update.message.reply_text(
        "üéß –ò–∑–±—Ä–∞–Ω–Ω–æ–µ:\n\n" + "\n".join(text_lines),
        reply_markup=reply_markup
    )


def show_favorites_callback(update: Update, context: CallbackContext):
    # –î–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ –∫–Ω–æ–ø–∫–µ (–∏–∑ CallbackQuery)
    query = update.callback_query
    query.answer()
    show_favorites(update, context)


def stats_command(update: Update, context: CallbackContext):
    user_data = context.user_data
    total_history = len(user_data.get('history', []))
    total_favorites = len(user_data.get('favorites', []))

    text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–≤–æ–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n"
        f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤: {total_history}\n"
        f"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {total_favorites}\n"
        f"‚Ä¢ –¢–µ–∫—É—â–∞—è –∏—Å—Ç–æ—Ä–∏—è —Ö—Ä–∞–Ω–∏—Ç –Ω–µ –±–æ–ª–µ–µ 30 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–µ–∫–æ–≤."
    )
    update.message.reply_text(text)


def help_command(update: Update, context: CallbackContext):
    update.message.reply_text(
        "üéµ –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç —Å–ª—É—á–∞–π–Ω—É—é –º—É–∑—ã–∫—É —Å YouTube –ø–æ –∂–∞–Ω—Ä–∞–º.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/fav ‚Äî –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏\n"
        "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/clearfav ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\n\n"
        "–ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫–∏ –∏ —Å–ª—É—à–∞–π –º—É–∑—ã–∫—É! üé∂"
    )


def clearfav_command(update: Update, context: CallbackContext):
    context.user_data['favorites'] = []
    update.message.reply_text("üóëÔ∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –æ—á–∏—â–µ–Ω–æ.")


def main():
    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help_command))
    dp.add_handler(CommandHandler("fav", show_favorites))
    dp.add_handler(CommandHandler("stats", stats_command))
    dp.add_handler(CommandHandler("clearfav", clearfav_command))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_genre))
    dp.add_handler(CallbackQueryHandler(button_handler))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
